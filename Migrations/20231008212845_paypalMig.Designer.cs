// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TpiBarberShop.DBContexts;

#nullable disable

namespace TpiBarberShop.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20231008212845_paypalMig")]
    partial class paypalMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("TpiBarberShop.Entities.ECategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "es una tijera",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4132),
                            Nombre = "Tijera"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "maquinita good",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4133),
                            Nombre = "Maquinita"
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.ECompras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("clientePaypalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fechaPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pagoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("valorPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Compras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 2,
                            Estado = "pendiente",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4113),
                            ProductoId = 1,
                            UsuarioId = 1,
                            clientePaypalId = "",
                            fechaPago = "",
                            pagoId = "",
                            valorPago = ""
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 4,
                            Estado = "confirmada",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4116),
                            ProductoId = 2,
                            UsuarioId = 2,
                            clientePaypalId = "132342f",
                            fechaPago = "8/10/2023",
                            pagoId = "123424223",
                            valorPago = "100"
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EDetalleCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdenCompraId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrdenCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleCompra");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 3,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4171),
                            OrdenCompraId = 1,
                            ProductoId = 1
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EImagenProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("ImagenProductos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4197),
                            ProductoId = 1,
                            URL = "www.produtoImagen"
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EImagenUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("ImagenUsuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4183),
                            URL = "www.usuarioImagen",
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EOrdenCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("OrdenCompras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "confirmada",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4158),
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            Estado = "pendiente",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4159),
                            UsuarioId = 2
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Precio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Descripcion = "Navaja",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(3829),
                            Nombre = "Navaja",
                            Precio = 5,
                            Stock = 40,
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Descripcion = "Gel de pelo",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(3843),
                            Nombre = "Gel",
                            Precio = 15,
                            Stock = 100,
                            SubcategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Descripcion = "Maquinita para cortar",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(3844),
                            Nombre = "Maquinita",
                            Precio = 80,
                            Stock = 15,
                            SubcategoryId = 1
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EPuntos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Puntos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Puntos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4023),
                            Nombre = "Pepito",
                            ProductoId = 1,
                            Puntos = 3,
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 4,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4025),
                            Nombre = "Robert",
                            ProductoId = 1,
                            Puntos = 3,
                            UsuarioId = 7
                        },
                        new
                        {
                            Id = 5,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4026),
                            Nombre = "Jesus",
                            ProductoId = 1,
                            Puntos = 3,
                            UsuarioId = 0
                        },
                        new
                        {
                            Id = 2,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4026),
                            Nombre = "Jorge",
                            ProductoId = 2,
                            Puntos = 1,
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 6,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4027),
                            Nombre = "Jorge123",
                            ProductoId = 2,
                            Puntos = 2,
                            UsuarioId = 4
                        },
                        new
                        {
                            Id = 7,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4028),
                            Nombre = "perro",
                            ProductoId = 2,
                            Puntos = 3,
                            UsuarioId = 5
                        },
                        new
                        {
                            Id = 3,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4029),
                            Nombre = "Juanchon",
                            ProductoId = 3,
                            Puntos = 5,
                            UsuarioId = 6
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.ESubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4147),
                            Nombre = "Tijeras"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4148),
                            Nombre = "Maquinita"
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EUsuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaPublicado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jose@jose.com",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4091),
                            Nombre = "Jose",
                            Password = "123",
                            Role = "Cliente"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Franco@Franco.com",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4093),
                            Nombre = "Franco",
                            Password = "123",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Pepito@Pepito.com",
                            FechaPublicado = new DateTime(2023, 10, 8, 18, 28, 45, 768, DateTimeKind.Local).AddTicks(4093),
                            Nombre = "Pepito",
                            Password = "123",
                            Role = "Cliente"
                        });
                });

            modelBuilder.Entity("TpiBarberShop.Entities.ECompras", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.EProducto", "Producto")
                        .WithMany("Compras")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpiBarberShop.Entities.EUsuarios", "Usuario")
                        .WithMany("Compras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EDetalleCompra", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.EOrdenCompra", "OrdenCompra")
                        .WithMany("DetalleCompra")
                        .HasForeignKey("OrdenCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpiBarberShop.Entities.EProducto", "Producto")
                        .WithMany("DetalleCompra")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EImagenProducto", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.EProducto", "Producto")
                        .WithMany("Imagenes")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EImagenUsuario", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.EUsuarios", "Usuario")
                        .WithOne("Imagen")
                        .HasForeignKey("TpiBarberShop.Entities.EImagenUsuario", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EOrdenCompra", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.EUsuarios", "Usuario")
                        .WithMany("OrdenCompra")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EProducto", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.ECategory", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TpiBarberShop.Entities.ESubcategory", "Subcategory")
                        .WithMany("Producto")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");

                    b.Navigation("category");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EPuntos", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.EProducto", "Producto")
                        .WithMany("Puntos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.ESubcategory", b =>
                {
                    b.HasOne("TpiBarberShop.Entities.ECategory", "Category")
                        .WithMany("SubCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.ECategory", b =>
                {
                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EOrdenCompra", b =>
                {
                    b.Navigation("DetalleCompra");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EProducto", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("DetalleCompra");

                    b.Navigation("Imagenes");

                    b.Navigation("Puntos");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.ESubcategory", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("TpiBarberShop.Entities.EUsuarios", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Imagen")
                        .IsRequired();

                    b.Navigation("OrdenCompra");
                });
#pragma warning restore 612, 618
        }
    }
}
